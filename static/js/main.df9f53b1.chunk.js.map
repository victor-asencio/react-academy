{"version":3,"sources":["components/Header.js","components/Card.js","components/FlipCard.js","components/CardGrid.js","icons/icons.js","index.js"],"names":["Header","props","className","intentos","onClick","resetHandler","Card","color","children","FlipCard","state","isFlipped","resolved","lockClick","handleClick","bind","this","setState","action","setTimeout","e","preventDefault","id","prevState","handleCardEvent","nextAction","flipDirection","icon","React","Component","CardGrid","references","refs","reset0","resetState","reset1","reset2","reset3","reset4","reset5","reset6","reset7","reset8","reset9","reset10","reset11","reset12","reset13","reset14","reset15","reset16","reset17","reset18","reset19","cards","map","elem","i","ref","key","icons","App","aciertos","getGridElements","resetGame","reset","newPos","temp","push","length","Math","floor","random","card","activeCard","console","log","alert","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.df9f53b1.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Header(props) {\r\n    return (\r\n        <header>\r\n            <div className=\"title\">\r\n                Memory Game\r\n            </div>\r\n            <div className=\"board\">\r\n                Intentos: {props.intentos}\r\n                <div className=\"reset-button\">\r\n                    <button className=\"reset\" onClick={props.resetHandler}>Reset Game</button>\r\n                </div>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Card(props) {\r\n    return (\r\n        <div onClick={props.onClick} className={`card ${props.color}`}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport ReactCardFlip from 'react-card-flip';\r\nimport Card from './Card.js';\r\n\r\nclass FlipCard extends React.Component {\r\n    \r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        isFlipped: false,\r\n        resolved: false,\r\n        lockClick: false\r\n      };\r\n      this.handleClick = this.handleClick.bind(this);\r\n    }\r\n   \r\n    resetState(){\r\n      //console.log(\"icon \",this.props.icon)\r\n      this.setState({\r\n        isFlipped: false,\r\n        resolved: false,\r\n        lockClick: false\r\n      })\r\n      //console.log(\"reset state: \", this.state)\r\n    }\r\n\r\n    /**\r\n     * Esta acción se llama luego de la lógica en CardGrid\r\n     * Se llama cada vez que se clickea una card\r\n     * Eso me dice si la carta esta resuelta y tengo que bloquearla o flipearla de vuelta\r\n     * @param {String} action \r\n     */\r\n    nextAction(action){\r\n      if(action===\"resolved\"){\r\n        this.setState({\r\n          resolved : true\r\n        }) \r\n      } else {\r\n        this.setState({\r\n          lockClick : true\r\n        })\r\n        setTimeout(()=>{\r\n          this.setState({\r\n            isFlipped : !this.state.isFlipped,\r\n            lockClick : false\r\n          })\r\n        }, 1000)\r\n        \r\n      }\r\n    }\r\n\r\n    handleClick(e) {\r\n      e.preventDefault();\r\n\r\n      let props = this.props,\r\n          id = props.id;\r\n      //console.log(\"lock click: \",this.state.lockClick)\r\n          \r\n      if(!this.state.resolved && !this.state.isFlipped ){\r\n        this.setState(prevState => ({ \r\n          isFlipped: !prevState.isFlipped \r\n        }));\r\n        \r\n        this.props.handleCardEvent({\r\n          nextAction : this.nextAction.bind(this),\r\n          id\r\n        });\r\n      }\r\n    }\r\n   \r\n    render() {\r\n      //console.log(\"update flip card\", this.state)\r\n      return (\r\n        <div className=\"card-container\">\r\n          <ReactCardFlip isFlipped={this.state.isFlipped} flipDirection=\"horizontal\">\r\n            <Card color=\"card-back\" onClick={this.handleClick}>\r\n            </Card>\r\n            <Card color=\"card-front\" onClick={this.handleClick}>\r\n              <i className={`fas ${this.props.icon}`}></i>\r\n            </Card>\r\n          </ReactCardFlip>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  export default FlipCard;","import React, { createRef } from 'react'\r\nimport FlipCard from './FlipCard.js'\r\n\r\nclass CardGrid extends React.Component{\r\n\r\n    references;\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.references = [];\r\n    }\r\n\r\n\r\n\r\n    resetState(){\r\n        \r\n        this.refs.reset0.resetState();\r\n        this.refs.reset1.resetState();\r\n        this.refs.reset2.resetState();\r\n        this.refs.reset3.resetState();\r\n        this.refs.reset4.resetState();\r\n        this.refs.reset5.resetState();\r\n        this.refs.reset6.resetState();\r\n        this.refs.reset7.resetState();\r\n        this.refs.reset8.resetState();\r\n        this.refs.reset9.resetState();\r\n        this.refs.reset10.resetState();\r\n        this.refs.reset11.resetState();\r\n        this.refs.reset12.resetState();\r\n        this.refs.reset13.resetState();\r\n        this.refs.reset14.resetState();\r\n        this.refs.reset15.resetState();\r\n        this.refs.reset16.resetState();\r\n        this.refs.reset17.resetState();\r\n        this.refs.reset18.resetState();\r\n        this.refs.reset19.resetState();\r\n    }\r\n\r\n    render(){\r\n\r\n        return (\r\n            <div className='card-grid'>\r\n                {\r\n                    this.props.cards.map((elem, i)=>{\r\n                        return <FlipCard ref={`reset${i}`} /*{this.getOrCreateRef(i)}*/ key={i} icon={elem.icon} id={elem.id} handleCardEvent={this.props.handleCardEvent}/>\r\n                    })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nexport default CardGrid;","\r\nexport let icons = [\r\n    \"fa-ambulance\",\r\n    \"fa-anchor\",\r\n    \"fa-angle-double-down\",\r\n    \"fa-assistive-listening-systems\",\r\n    \"fa-bahai\",\r\n    \"fa-band-aid\",\r\n    \"fa-bicycle\",\r\n    \"fa-bomb\",\r\n    \"fa-bug\",\r\n    \"fa-cat\",\r\n    \"fa-child\",\r\n    \"fa-dumbbell\"\r\n];","import React from \"react\";\r\nimport ReactDOM from 'react-dom';\r\nimport Header from './components/Header.js';\r\nimport CardGrid from './components/CardGrid.js';\r\n\r\nimport { icons } from './icons/icons.js'\r\n\r\n\r\nimport './style/reset.css';\r\nimport './style/index.css';\r\n\r\nexport default class  App extends React.Component {\r\n  \r\n  cards;\r\n  state;\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      intentos: 0,\r\n      aciertos: 0\r\n    }\r\n    this.cards = this.getGridElements();\r\n  }\r\n\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"main\">\r\n        <Header intentos={this.state.intentos} resetHandler={this.resetGame.bind(this)}/>\r\n        <CardGrid ref=\"reset\" cards={this.cards} handleCardEvent={this.handleCardEvent.bind(this)}/>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  resetGame(){\r\n    this.cards = this.getGridElements();\r\n    this.refs.reset.resetState();\r\n    this.setState({\r\n      intentos: 0,\r\n      aciertos: 0\r\n    })\r\n  }\r\n\r\n  getGridElements(){\r\n    \r\n    let cards = [],\r\n        newPos,\r\n        temp;\r\n\r\n    for(let i = 0; i<10; i++){\r\n        cards.push({\r\n            id : i,\r\n            icon : icons[i]\r\n        });\r\n        cards.push({\r\n            id : i,\r\n            icon : icons[i]\r\n        });\r\n    }\r\n\r\n    /* Shuffle array two times */\r\n    for( let i = cards.length - 1; i>0; i--){\r\n      newPos = Math.floor(Math.random()*(i+1));\r\n      temp = cards[i];\r\n      cards[i] = cards[newPos];\r\n      cards[newPos] = temp;\r\n    }\r\n\r\n    for( let i = cards.length - 1; i>0; i--){\r\n      newPos = Math.floor(Math.random()*(i+1));\r\n      temp = cards[i];\r\n      cards[i] = cards[newPos];\r\n      cards[newPos] = temp;\r\n    }\r\n    \r\n    return cards;\r\n  }\r\n\r\n  handleCardEvent(card){\r\n    if(!this.state.activeCard){\r\n        this.setState({\r\n            activeCard : card\r\n        })\r\n    }else{\r\n        let intentos = this.state.intentos;\r\n        this.setState({\r\n          intentos: ++intentos\r\n        })\r\n        if(this.state.activeCard.id === card.id){\r\n            this.state.activeCard.nextAction(\"resolved\");\r\n            card.nextAction(\"resolved\");\r\n\r\n            console.log('aciertos ',this.state.aciertos);\r\n            this.setState((prevState) => {\r\n              return {\r\n                activeCard : null,\r\n                aciertos: ++prevState.aciertos\r\n              } \r\n            })\r\n            console.log('aciertos ',this.state.aciertos);\r\n            if(this.state.aciertos===9){\r\n              alert(`Ganaste en ${this.state.intentos}!`);\r\n              this.resetGame();\r\n            }\r\n        }else {\r\n            this.state.activeCard.nextAction(\"notresolved\");\r\n            card.nextAction(\"notresolved\");\r\n            this.setState({\r\n                activeCard : null\r\n            })\r\n        }\r\n    }\r\n  }\r\n    \r\n}\r\n\r\n\r\nReactDOM.render(<App/>,document.querySelector(\"#root\"));"],"sourceRoot":""}